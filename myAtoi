/*
实现 atoi，将字符串转为整数。

在找到第一个非空字符之前，需要移除掉字符串中的空格字符。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组合起来，这部分字符即为整数的值。如果第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

字符串可以在形成整数的字符后面包括多余的字符，这些字符可以被忽略，它们对于函数没有影响。

当字符串中的第一个非空字符序列不是个有效的整数；或字符串为空；或字符串仅包含空白字符时，则不进行转换。

若函数不能执行有效的转换，返回 0。

说明：
假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。如果数值超过可表示的范围，则返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。
*/
/**
 * @param {string} str
 * @return {number}
 */
var myAtoi = function(str) {
    str = str.split('');
    var pos = 0;
    for(var i=0;i<str.length;i++){
        if(str[i]!==' '){
            pos = i;
            break;
        }
    }
    str.splice(0,i);
    var pattern = /^[0-9]*$/;
    var firstChar =str[0];
    var num = firstChar;
    var min = -Math.pow(2,31);    
    var max = Math.abs(min)-1;
    var pos = 1;
    var result = 0;
    if(firstChar !=='-' && firstChar !=='+' && !pattern.test(firstChar)){
        return result;
    }else{
         while(pattern.test(str[pos])){
            num+=str[pos];
            pos++;
        }
        result = num;
        if(num>max){
            result = max;
        }
        if(num<min){
            result = min;
        }   
    }
    result = isNaN(Number(result)) ? 0 : Number(result)
    return Number(result)
};
